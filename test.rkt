#lang racket

(require (prefix-in rs: rsound rsound/piano-tones rsound/envelope))

(struct note/s [pitch accidental octave] #:transparent)
(struct midi/s [number] #:transparent)

;; we'll build up to go from note to piano rsound

;; note->midi: note/s -> midi/s
(define (note->midi note)
  (match note
    [(note/s pitch accidental octave)
     ;; IMPLEMENT ME - formula for converting note to midi. C4 = 60
     ;... pitch ... accidental ... octave
     ]))

;; calculate samples given a duration in beats and a tempo in bpm
(define (duration->samples duration tempo)
  ;; IMPLEMENT ME 
  ... use (rs:default-sample-rate)...
  )

;; convert a note to a rsound that plays a piano tone.
(define (note->piano n d tempo)
  (define len (duration->samples d tempo))
  (rs:clip
   (rs:rs-mult
    ;; midi/s-number is an accesor generated by `(struct midi/s [number])`. Alternatively, could
    ;; have used `match`.
    (rs:piano-tone (midi/s-number (note->midi n)))
    ((rs:adsr 2 1.0 2 1.0 (exact-round (* 1/2 len))) len))
   0 len))


;; now we'll make melodies easier

;; lengths is a list of beat values
(struct rhythm/s [durations] #:transparent)

(define (translate-line rhythm notes)
  
  (match rhythm
    [(rhythm/s durations)
     ;; IMPLEMENT ME - precondition
     (unless ... 
       (error 'translate-line "must have same number of durations and notes."))

     ;; `rs-append` looks like this: `(rs-append sound-a sound-b sound-c ...)`
     ;; `(rs-append (list sound-a sound-b sound-c))` is therefore wrong.
     ;; in lisp you fix this with `apply`.
     (apply rs-append
       ;; iterating through durations and notes at the same time, collecting the results in a list
       (for/list ([dur durations] [note notes]))
         ;; IMPLEMENT ME (simple)
         ...)
    ]))

;; easy way to write notes.

(define-syntax (notes stx)
  (syntax-parse stx
    [({~literal notes} (pitch accidental octave) ...)
     #'(list (note/s 'pitch accidental octave) ...)]))

(module+ test
  ;; '(2 4 2 4) is the same as (list 2 4 2 4)
  (check-equal? 
    (translate-line (rhythm/s '(2 4 2 4)) (notes (a 0 3) (c 1 4) (e 0 4) (a 0 4)))
    ;; no, you may not use this implementation for `translate-line`.
    (map note->piano (notes [a 0 3] [c 1 4] [e 0 4] [a 0 4]) '(2 4 2 4))))
